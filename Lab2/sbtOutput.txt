[0m[[0minfo[0m] [0mSet current project to Lab2 (in build file:/Users/Jacob/jara8300/Lab2/)[0m
[0m[[0minfo[0m] [0mUpdating {file:/Users/Jacob/jara8300/Lab2/}default-56b7b1...[0m
[0m[[0minfo[0m] [0mResolving org.scala-lang#scala-library;2.9.1 ...[0m
M[2K[0m[[0minfo[0m] [0mResolving org.scalatest#scalatest_2.9.1;1.6.1 ...[0m
[0m[[0minfo[0m] [0mDone updating.[0m
[0m[[0minfo[0m] [0mCompiling 4 Scala sources to /Users/Jacob/jara8300/Lab2/target/scala-2.9.1/classes...[0m
[0m[[33mwarn[0m] [0mthere were 1 deprecation warnings; re-run with -deprecation for details[0m
[0m[[33mwarn[0m] [0mone warning found[0m
[0m[[0minfo[0m] [0mCompiling 8 Scala sources to /Users/Jacob/jara8300/Lab2/target/scala-2.9.1/test-classes...[0m
[0m[[0minfo[0m] [0m[32mConstSpec:[0m[0m
[0m[[0minfo[0m] [0m[32mConstDecl [0m[0m
[0m[[0minfo[0m] [0m[31m- should extend the environment with the first expression results bound to the identifier, and then evaluate the second expression *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  java.lang.UnsupportedOperationException:[0m[0m
[0m[[0minfo[0m] [0m[31m  at Lab2$.eval(Lab2.scala:127)[0m[0m
[0m[[0minfo[0m] [0m[31m  at Lab2$.evaluate(Lab2.scala:131)[0m[0m
[0m[[0minfo[0m] [0m[31m  at ConstSpec$$anonfun$1.apply$mcV$sp(ConstSpec.scala:10)[0m[0m
[0m[[0minfo[0m] [0m[31m  at ConstSpec$$anonfun$1.apply(ConstSpec.scala:7)[0m[0m
[0m[[0minfo[0m] [0m[31m  at ConstSpec$$anonfun$1.apply(ConstSpec.scala:7)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.FlatSpec$$anon$1.apply(FlatSpec.scala:2563)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.Suite$class.withFixture(Suite.scala:1968)[0m[0m
[0m[[0minfo[0m] [0m[31m  at ConstSpec.withFixture(ConstSpec.scala:5)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.FlatSpec$class.invokeWithFixture$1(FlatSpec.scala:2560)[0m[0m
[0m[[0minfo[0m] [0m[31m  at org.scalatest.FlatSpec$$anonfun$runTest$1.apply(FlatSpec.scala:2569)[0m[0m
[0m[[0minfo[0m] [0m[31m  ...[0m[0m
[0m[[0minfo[0m] [0m[32mComparisonSpec:[0m[0m
[0m[[0minfo[0m] [0m[32mEq [0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if two numerical values are the same[0m[0m
[0m[[0minfo[0m] [0m[32mEq [0m[0m
[0m[[0minfo[0m] [0m[32m- should return false if two numerical values are not the same[0m[0m
[0m[[0minfo[0m] [0m[32mNe [0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if two numerical values are different[0m[0m
[0m[[0minfo[0m] [0m[32mNe [0m[0m
[0m[[0minfo[0m] [0m[32m- should return false if two numerical values are the same[0m[0m
[0m[[0minfo[0m] [0m[32mLt [0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if the first expression is less than the second[0m[0m
[0m[[0minfo[0m] [0m[32mLt [0m[0m
[0m[[0minfo[0m] [0m[32m- should return false if the first expression is not strictly less than the second[0m[0m
[0m[[0minfo[0m] [0m[32mLt [0m[0m
[0m[[0minfo[0m] [0m[32m- should return false if two number values are the same[0m[0m
[0m[[0minfo[0m] [0m[32mLe [0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if the first expression is less than the second[0m[0m
[0m[[0minfo[0m] [0m[32mLe [0m[0m
[0m[[0minfo[0m] [0m[32m- should return false if the first expression is greater than the second[0m[0m
[0m[[0minfo[0m] [0m[32mLe [0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if two number values are the same[0m[0m
[0m[[0minfo[0m] [0m[32mGt [0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if the first expression is greater than the second[0m[0m
[0m[[0minfo[0m] [0m[32mGt [0m[0m
[0m[[0minfo[0m] [0m[32m- should return false if the first expression is not strictly greater than the second[0m[0m
[0m[[0minfo[0m] [0m[32mGt [0m[0m
[0m[[0minfo[0m] [0m[32m- should return false if two number values are the same[0m[0m
[0m[[0minfo[0m] [0m[32mGe [0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if the first expression is greater than the second[0m[0m
[0m[[0minfo[0m] [0m[32mGe [0m[0m
[0m[[0minfo[0m] [0m[32m- should return false if the first expression is less than the second[0m[0m
[0m[[0minfo[0m] [0m[32mGe [0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if two number values are the same[0m[0m
[0m[[0minfo[0m] [0m[32mComparisons [0m[0m
[0m[[0minfo[0m] [0m[32m- should produce non-intuitive results given the expressions given[0m[0m
[0m[[0minfo[0m] [0m[32mSeqSpec:[0m[0m
[0m[[0minfo[0m] [0m[32mSeq [0m[0m
[0m[[0minfo[0m] [0m[32m- should execute the first expression, followed by the second, and should evaluate to the second expression[0m[0m
[0m[[0minfo[0m] [0m[32mAndOrSpec:[0m[0m
[0m[[0minfo[0m] [0m[32mAnd [0m[0m
[0m[[0minfo[0m] [0m[32m- should return true only if both expressions are true[0m[0m
[0m[[0minfo[0m] [0m[32mAnd [0m[0m
[0m[[0minfo[0m] [0m[31m- should return non-intuitive results from differing types *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  false did not equal 0.0 (AndOrSpec.scala:20)[0m[0m
[0m[[0minfo[0m] [0m[32mOr [0m[0m
[0m[[0minfo[0m] [0m[32m- should return true if either or both expressions are true[0m[0m
[0m[[0minfo[0m] [0m[32mOr [0m[0m
[0m[[0minfo[0m] [0m[31m- should return non-intuitive results from differing types *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  true did not equal 5.0 (AndOrSpec.scala:36)[0m[0m
[0m[[0minfo[0m] [0m[32mUnarySpec:[0m[0m
[0m[[0minfo[0m] [0m[32mNeg [0m[0m
[0m[[0minfo[0m] [0m[32m- should return the negation of a number value[0m[0m
[0m[[0minfo[0m] [0m[32mNot [0m[0m
[0m[[0minfo[0m] [0m[32m- should return the compliment of a boolean value[0m[0m
[0m[[0minfo[0m] [0m[32mIfSpec:[0m[0m
[0m[[0minfo[0m] [0m[32mIf [0m[0m
[0m[[0minfo[0m] [0m[32m- should evaluate the first expression if the conditional is true[0m[0m
[0m[[0minfo[0m] [0m[32mIf [0m[0m
[0m[[0minfo[0m] [0m[32m- should evaluate the second expression if the conditional is false[0m[0m
[0m[[0minfo[0m] [0m[32mArithmeticSpec:[0m[0m
[0m[[0minfo[0m] [0m[32mPlus [0m[0m
[0m[[0minfo[0m] [0m[32m- should add two number values and return a number[0m[0m
[0m[[0minfo[0m] [0m[32mMinus [0m[0m
[0m[[0minfo[0m] [0m[32m- should subtract two number values and return a number[0m[0m
[0m[[0minfo[0m] [0m[32mTimes [0m[0m
[0m[[0minfo[0m] [0m[32m- should multiply two number values and return a number[0m[0m
[0m[[0minfo[0m] [0m[32mDiv [0m[0m
[0m[[0minfo[0m] [0m[32m- should divide two number values and return a number[0m[0m
[0m[[0minfo[0m] [0m[32mArithmetic Operators [0m[0m
[0m[[0minfo[0m] [0m[32m- should produce non-intuitive solutions given differing expression types[0m[0m
[0m[[31merror[0m] [0mFailed: : Total 32, Failed 3, Errors 0, Passed 29, Skipped 0[0m
[0m[[31merror[0m] [0mFailed tests:[0m
[0m[[31merror[0m] [0m	ConstSpec[0m
[0m[[31merror[0m] [0m	AndOrSpec[0m
java.lang.RuntimeException: Tests unsuccessful
	at scala.sys.package$.error(package.scala:27)
	at scala.Predef$.error(Predef.scala:123)
	at sbt.Tests$.showResults(Tests.scala:192)
	at sbt.Defaults$$anonfun$testTasks$6.apply(Defaults.scala:296)
	at sbt.Defaults$$anonfun$testTasks$6.apply(Defaults.scala:294)
	at sbt.Scoped$$anonfun$hf4$1.apply(Structure.scala:580)
	at sbt.Scoped$$anonfun$hf4$1.apply(Structure.scala:580)
	at scala.Function1$$anonfun$compose$1.apply(Function1.scala:49)
	at sbt.Scoped$Reduced$$anonfun$combine$1$$anonfun$apply$12.apply(Structure.scala:311)
	at sbt.Scoped$Reduced$$anonfun$combine$1$$anonfun$apply$12.apply(Structure.scala:311)
	at sbt.$tilde$greater$$anonfun$$u2219$1.apply(TypeFunctions.scala:41)
	at sbt.std.Transform$$anon$5.work(System.scala:71)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
	at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
	at sbt.Execute.work(Execute.scala:238)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
	at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:160)
	at sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:439)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
[0m[[31merror[0m] [0m(test:[31mtest[0m) Tests unsuccessful[0m
[0m[[31merror[0m] [0mTotal time: 23 s, completed Feb 13, 2013 8:39:42 PM[0m
